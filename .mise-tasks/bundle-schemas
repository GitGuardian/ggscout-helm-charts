#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

#USAGE arg "ggscout_version" help="GGScout version to fetch schemas for" default="latest"

GGSCOUT_VERSION="${1:-latest}"

echo "==================================="
echo "GGScout Schema Bundle Process"
echo "==================================="
echo "GGScout Version: ${GGSCOUT_VERSION}"
echo ""

# Fetch schemas for the specified version (integrated logic)
echo "Step 1: Fetching schemas..."
echo "-----------------------------------"

fetch_schemas() {
  local version="$1"
  local SCHEMA_BASE_URL="https://ggscout-repository.gitguardian.com/ggscout"
  local REMOTE_SCHEMA_FILES=("inventory-config.schema.json" "inventory-log-level.schema.json")
  local LOCAL_SCHEMA_FILES=("jobs.schema.json")
  local CACHE_DIR=".cache/schemas"
  local version_cache_dir="${CACHE_DIR}/${version}"
  
  echo "Fetching schemas for GGScout version: ${version}"
  
  # Create version-specific cache directory
  mkdir -p "${version_cache_dir}"
  
  # Download remote schemas
  for schema_file in "${REMOTE_SCHEMA_FILES[@]}"; do
    local url="${SCHEMA_BASE_URL}/${version}/schemas/${schema_file}"
    local output_path="${version_cache_dir}/${schema_file}"
    
    echo "Downloading: ${url}"
    if curl -fsSL "${url}" -o "${output_path}"; then
      echo "✓ Downloaded: ${schema_file}"
    else
      echo "✗ Failed to download: ${schema_file}"
      return 1
    fi
  done
  
  # Copy local schemas
  for schema_file in "${LOCAL_SCHEMA_FILES[@]}"; do
    local local_path="schemas/${schema_file}"
    local output_path="${version_cache_dir}/${schema_file}"
    
    if [[ -f "${local_path}" ]]; then
      cp "${local_path}" "${output_path}"
      echo "✓ Copied local schema: ${schema_file}"
    else
      echo "✗ Local schema not found: ${local_path}"
      return 1
    fi
  done
  
  echo "✓ All schemas ready in: ${version_cache_dir}"
  return 0
}

if ! fetch_schemas "${GGSCOUT_VERSION}"; then
  echo "Error: Failed to fetch schemas for version ${GGSCOUT_VERSION}"
  exit 1
fi

# Determine schema source directory
SCHEMA_SOURCE_DIR=".cache/schemas/${GGSCOUT_VERSION}"

echo ""
echo "Step 2: Bundling schemas..."
echo "-----------------------------------"

process_json_schema() {
  local directory="$1"
  local base_values_schema_path="${directory}"/values-base-schema.schema.json
  local values_schema_path="${directory}"/values.schema.json
  local temp_dir
  temp_dir="$(mktemp -d)"
  local bundled_path="${temp_dir}"/resolved.json
  
  echo "Bundling schema from ${base_values_schema_path}"
  echo "Using schema source: ${SCHEMA_SOURCE_DIR}"
  echo "Output: ${values_schema_path}"
  
  # Use cached schemas instead of local schemas/ folder
  jsonschema bundle --resolve "${SCHEMA_SOURCE_DIR}" "${base_values_schema_path}" --without-id > "${values_schema_path}"
  
  # Post-process to fix all schema structure issues
  echo "Post-processing schema to fix all structural issues..."
  node scripts/fix-schema-structure.js "${values_schema_path}"
  
  echo "✓ Schema bundling completed for ${directory}"
}

for chart in charts/*/
do
  process_json_schema "$chart"
done
