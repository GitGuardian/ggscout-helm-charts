{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": [
    "inventory"
  ],
  "minProperties": 1,
  "properties": {
    "inventory": {
      "type": "object",
      "required": [
        "config"
      ],
      "minProperties": 1,
      "properties": {
        "config": {
          "$ref": "#/definitions/inventory-config.schema.json"
        },
        "jobs": {
          "$ref": "#/definitions/jobs.schema.json"
        },
        "log_level": {
          "$ref": "#/definitions/inventory-log-level.schema.json"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": {
    "type": [
      "null",
      "boolean",
      "object",
      "array",
      "string",
      "number",
      "integer"
    ]
  },
  "definitions": {
    "inventory-config.schema.json": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Config",
      "type": "object",
      "minProperties": 0,
      "properties": {
        "gitguardian": {
          "anyOf": [
            {
              "$ref": "#/definitions/inventory-config.schema.json/$defs/GitGuardianConfig"
            },
            {
              "enum": [
                null
              ]
            }
          ]
        },
        "sources": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/inventory-config.schema.json/$defs/FetcherConfig"
          }
        }
      },
      "$defs": {
        "Accessibility": {
          "enum": [
            "regular",
            "personal"
          ]
        },
        "AkeylessAPIKeyAuth": {
          "type": "object",
          "required": [
            "auth_mode",
            "access_id",
            "access_key"
          ],
          "minProperties": 3,
          "properties": {
            "access_id": {
              "description": "Akeyless Access ID",
              "type": "string",
              "minLength": 0
            },
            "access_key": {
              "description": "Akeyless Access Key",
              "type": "string",
              "minLength": 0
            },
            "auth_mode": {
              "type": "string",
              "minLength": 0
            }
          }
        },
        "AkeylessConfig": {
          "type": "object",
          "required": [
            "auth",
            "fetch_all_versions"
          ],
          "minProperties": 2,
          "properties": {
            "accessibility": {
              "default": "regular",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Accessibility"
            },
            "api_url": {
              "description": "Akeyless API v2 URL. Default to https://api.akeyless.io/.\nIf you use an Akeyless Gateway, you must use the complete URL. Example: https://my-akeyless-gw.com/api/v2/",
              "default": "https://api.akeyless.io/",
              "type": "string",
              "format": "uri",
              "minLength": 0
            },
            "auth": {
              "description": "Auth mode: using one of Akeyless Authentication Method. Only APIKey for the moment",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AuthMode4"
            },
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            }
          }
        },
        "AuthMode": {
          "oneOf": [
            {
              "title": "Token",
              "description": "Pass a token string to authenticate",
              "type": "object",
              "required": [
                "auth_mode",
                "token"
              ],
              "minProperties": 2,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "token"
                  ]
                },
                "token": {
                  "type": "string",
                  "minLength": 0
                }
              }
            },
            {
              "title": "Token file path",
              "description": "Pass a file containing a token string to authenticate",
              "type": "object",
              "required": [
                "auth_mode",
                "token_file"
              ],
              "minProperties": 2,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "token_file"
                  ]
                },
                "token_file": {
                  "type": "string",
                  "minLength": 0
                }
              }
            },
            {
              "title": "Kubernetes authentication",
              "description": "Use k8s authentication.\nIf ggscout is running outside a K8s cluster, it uses the kubeconfig file,\notherwise it uses an in-cluster K8s client",
              "type": "object",
              "required": [
                "auth_mode",
                "role"
              ],
              "minProperties": 2,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "k8s"
                  ]
                },
                "mount": {
                  "description": "HashiCorp login mount point. By default, \"kubernetes\"",
                  "default": "kubernetes",
                  "type": "string",
                  "minLength": 0
                },
                "namespace": {
                  "description": "Kubernetes namespace where service account is defined",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "role": {
                  "description": "HashiCorp Role to be used for authentication",
                  "type": "string",
                  "minLength": 0
                },
                "service_account": {
                  "description": "Kubernetes service account used for authentication",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "token_expiration_seconds": {
                  "description": "Token expiration time in second. Default to 30 minutes",
                  "default": 1800,
                  "type": "integer",
                  "multipleOf": 1
                }
              }
            }
          ]
        },
        "AuthMode2": {
          "oneOf": [
            {
              "title": "Service Account Key File",
              "description": "Use a service account key file for authentication",
              "type": "object",
              "required": [
                "auth_mode",
                "key_file"
              ],
              "minProperties": 2,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "service_account_key_file"
                  ]
                },
                "key_file": {
                  "type": "string",
                  "minLength": 0
                }
              }
            },
            {
              "title": "Kubernetes Workload Identity Federation",
              "description": "Use Kubernetes API to get service account tokens and authenticate via WIF.\nThis is the most secure and cloud-native authentication method.",
              "type": "object",
              "required": [
                "auth_mode",
                "project_id",
                "project_number",
                "pool_id",
                "provider_id",
                "gcp_service_account_name"
              ],
              "minProperties": 6,
              "properties": {
                "audience": {
                  "description": "Custom audience for the WIF provider. If not specified, defaults to the standard\nWIF provider URL format: //iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/providers/{provider_id}",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "auth_mode": {
                  "enum": [
                    "k8s"
                  ]
                },
                "gcp_service_account_name": {
                  "description": "Google Service Account name (without @project.iam.gserviceaccount.com)",
                  "type": "string",
                  "minLength": 0
                },
                "kubernetes_namespace": {
                  "description": "Kubernetes namespace where the service account is located",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "kubernetes_service_account": {
                  "description": "Kubernetes service account name to use for authentication",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "pool_id": {
                  "description": "Workload Identity Pool ID",
                  "type": "string",
                  "minLength": 0
                },
                "project_id": {
                  "description": "GCP Project ID where the service account is located",
                  "type": "string",
                  "minLength": 0
                },
                "project_number": {
                  "description": "GCP Project Number",
                  "type": "string",
                  "minLength": 0
                },
                "provider_id": {
                  "description": "Workload Identity Provider ID",
                  "type": "string",
                  "minLength": 0
                },
                "token_expiration_seconds": {
                  "description": "Token expiration time in seconds. Default to 30 minutes",
                  "default": 1800,
                  "type": "integer",
                  "multipleOf": 1
                }
              }
            }
          ]
        },
        "AuthMode3": {
          "oneOf": [
            {
              "title": "CyberArk authentication",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/CyberArkAuth",
              "type": "object",
              "required": [
                "auth_mode"
              ],
              "minProperties": 1,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "cyber_ark"
                  ]
                }
              }
            },
            {
              "title": "Workload authentication",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/ConjurWorkloadAuth",
              "type": "object",
              "required": [
                "auth_mode"
              ],
              "minProperties": 1,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "workload"
                  ]
                }
              }
            },
            {
              "title": "Kubernetes authentication",
              "type": "object",
              "required": [
                "auth_mode"
              ],
              "minProperties": 1,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "k8s"
                  ]
                },
                "host_id": {
                  "description": "Optional Host ID for the K8s authenticator",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Kubernetes namespace where service account is defined",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "service_account": {
                  "description": "Kubernetes service account used for authentication",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "service_id": {
                  "description": "Service ID for the K8s authenticator",
                  "default": "kubernetes",
                  "type": "string",
                  "minLength": 0
                },
                "token_expiration_seconds": {
                  "description": "Token expiration time in seconds. Default to 30 minutes",
                  "default": 1800,
                  "type": "integer",
                  "multipleOf": 1
                }
              }
            }
          ]
        },
        "AuthMode4": {
          "anyOf": [
            {
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AkeylessAPIKeyAuth"
            }
          ]
        },
        "AzureKeyVaultConfig": {
          "type": "object",
          "required": [
            "subscription_id",
            "fetch_all_versions"
          ],
          "minProperties": 2,
          "properties": {
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "subscription_id": {
              "type": "string",
              "minLength": 0
            }
          }
        },
        "ConjurCloudConfig": {
          "type": "object",
          "required": [
            "auth",
            "subdomain",
            "fetch_all_versions"
          ],
          "minProperties": 3,
          "properties": {
            "auth": {
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AuthMode3"
            },
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "subdomain": {
              "title": "The Conjur Cloud subdomain",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "ConjurWorkloadAuth": {
          "type": "object",
          "required": [
            "login",
            "api_key"
          ],
          "minProperties": 2,
          "properties": {
            "api_key": {
              "description": "Workload API key for authenticating",
              "type": "string",
              "minLength": 0
            },
            "login": {
              "description": "Workload login (ID) for authenticating",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "CyberArkAuth": {
          "type": "object",
          "required": [
            "tenant_id",
            "client_id",
            "client_secret"
          ],
          "minProperties": 3,
          "properties": {
            "client_id": {
              "description": "CyberArk client ID or Conjur workload Client ID",
              "type": "string",
              "minLength": 0
            },
            "client_secret": {
              "description": "Secret for authenticating",
              "type": "string",
              "minLength": 0
            },
            "tenant_id": {
              "description": "Cyberark Cloud tenant ID",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "DelineaSecretServerConfig": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/inventory-config.schema.json/$defs/DelineaSecretServerOAuth",
              "type": "object",
              "required": [
                "auth_mode"
              ],
              "minProperties": 1,
              "properties": {
                "auth_mode": {
                  "enum": [
                    "oauth"
                  ]
                }
              }
            }
          ],
          "required": [
            "tenant"
          ],
          "minProperties": 1,
          "properties": {
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "tenant": {
              "description": "Delinea tenant",
              "type": "string",
              "minLength": 0
            },
            "tld": {
              "description": "Top-level domain\nThis can be found by clicking on \"Token API documentation\" in the Settings > REST API section of the Secret Server UI",
              "default": "com",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "DelineaSecretServerOAuth": {
          "type": "object",
          "required": [
            "client_id",
            "client_secret"
          ],
          "minProperties": 2,
          "properties": {
            "client_id": {
              "type": "string",
              "minLength": 0
            },
            "client_secret": {
              "type": "string",
              "minLength": 0
            }
          }
        },
        "Env": {
          "description": "Declare an environment",
          "oneOf": [
            {
              "title": "production",
              "description": "aliases accepted: `prod` and `prd`",
              "enum": [
                "production"
              ]
            },
            {
              "title": "pre-production",
              "description": "aliases accepted: `pre-prod`, `preprod` and `preproduction`",
              "enum": [
                "pre-production"
              ]
            },
            {
              "title": "staging",
              "enum": [
                "staging"
              ]
            },
            {
              "title": "testing",
              "enum": [
                "testing"
              ]
            },
            {
              "title": "development",
              "description": "aliases accepted: `dev` and `local`",
              "enum": [
                "development"
              ]
            }
          ]
        },
        "FetcherConfig": {
          "oneOf": [
            {
              "title": "HashiCorp Vault",
              "description": "This fetcher fetches secrets from [HashiCorp Vault](https://www.hashicorp.com/products/vault)",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/HashiCorpVaultConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "hashicorpvault"
                  ]
                }
              }
            },
            {
              "title": "Kubernetes",
              "description": "Kubernetes fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/K8sConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "k8s"
                  ]
                }
              }
            },
            {
              "title": "AWS Secrets Manager",
              "description": "AWS Secrets Manager fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/SecretsManagerConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "awssecretsmanager"
                  ]
                }
              }
            },
            {
              "title": "GCP Secret Manager",
              "description": "GCP Secret Manager fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/GCPSecretManagerConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "gcpsecretmanager"
                  ]
                }
              }
            },
            {
              "title": "Azure Key Vault",
              "description": "Azure Key Vault fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AzureKeyVaultConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "azurekeyvault"
                  ]
                }
              }
            },
            {
              "title": "GitLab CI",
              "description": "GitLab CI fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/GitLabCIConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "gitlabci"
                  ]
                }
              }
            },
            {
              "title": "Conjur Cloud",
              "description": "Conjur Cloud fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/ConjurCloudConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "conjurcloud"
                  ]
                }
              }
            },
            {
              "title": "Akeyless",
              "description": "Akeyless fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AkeylessConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "akeyless"
                  ]
                }
              }
            },
            {
              "title": "Delinea Secret Server",
              "description": "Delinea SecretServer fetcher",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/DelineaSecretServerConfig",
              "type": "object",
              "required": [
                "type"
              ],
              "minProperties": 1,
              "properties": {
                "type": {
                  "enum": [
                    "delineasecretserver"
                  ]
                }
              }
            }
          ]
        },
        "FilteringRule": {
          "type": "object",
          "minProperties": 0,
          "properties": {
            "resource_ids": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/RuleElement"
              }
            },
            "source_ids": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/RuleElement"
              }
            }
          }
        },
        "GCPSecretManagerConfig": {
          "type": "object",
          "required": [
            "fetch_all_versions"
          ],
          "minProperties": 1,
          "properties": {
            "auth": {
              "description": "Authentication method for GCP\nIf not specified, defaults to Application Default Credentials",
              "default": {
                "auth_mode": "application_default"
              },
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AuthMode2"
            },
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "projects": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string",
                "minLength": 0
              }
            }
          }
        },
        "GitGuardianConfig": {
          "title": "GitGuardian configuration",
          "type": "object",
          "required": [
            "endpoint",
            "api_token"
          ],
          "minProperties": 2,
          "properties": {
            "api_token": {
              "title": "API Token to authenticate with",
              "type": "string",
              "minLength": 0
            },
            "endpoint": {
              "title": "Hostname or endpoint",
              "description": "Example: https://gitguardian.internal/",
              "type": "string",
              "format": "uri",
              "minLength": 0
            }
          }
        },
        "GitLabCIConfig": {
          "type": "object",
          "required": [
            "url",
            "token"
          ],
          "minProperties": 2,
          "properties": {
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "token": {
              "type": "string",
              "minLength": 0
            },
            "url": {
              "type": "string",
              "format": "uri",
              "minLength": 0
            }
          }
        },
        "HashiCorpVaultConfig": {
          "type": "object",
          "required": [
            "vault_address",
            "fetch_all_versions"
          ],
          "minProperties": 2,
          "properties": {
            "auth": {
              "description": "Authentication method.\nIf no authentication method is provided `VAULT_TOKEN` env variable is used as a default token",
              "default": {
                "auth_mode": "token",
                "token": "token from VAULT_TOKEN env"
              },
              "$ref": "#/definitions/inventory-config.schema.json/$defs/AuthMode"
            },
            "auth_token": {
              "description": "[Deprecated - Use `auth.auth_method = \"token\"` and `auth.token = \"my_token\"` instead]",
              "deprecated": true,
              "type": [
                "string",
                "null"
              ]
            },
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "path": {
              "type": [
                "string",
                "null"
              ]
            },
            "vault_address": {
              "type": "string",
              "format": "uri",
              "minLength": 0
            }
          }
        },
        "InCluster": {
          "type": "object",
          "required": [
            "name"
          ],
          "minProperties": 1,
          "properties": {
            "name": {
              "description": "Kubernetes cluster name is mandatory because it cannot be retrieved with the Kubernetes API",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "K8sConfig": {
          "type": "object",
          "oneOf": [
            {
              "title": "KubeConfig File",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/KubeConfigFile",
              "type": "object",
              "required": [
                "config_source"
              ],
              "minProperties": 1,
              "properties": {
                "config_source": {
                  "enum": [
                    "kubeconfigfile"
                  ]
                }
              }
            },
            {
              "title": "InCluster",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/InCluster",
              "type": "object",
              "required": [
                "config_source"
              ],
              "minProperties": 1,
              "properties": {
                "config_source": {
                  "enum": [
                    "incluster"
                  ]
                }
              }
            }
          ],
          "minProperties": 0,
          "properties": {
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "namespaces": {
              "description": "Namespaces to read from. Can be a literal string or a glob expression to match\nmultiple namespaces.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string",
                "minLength": 0
              }
            }
          }
        },
        "KubeConfigFile": {
          "type": "object",
          "minProperties": 0,
          "properties": {
            "contexts": {
              "description": "Kubernetes contexts to filter on.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string",
                "minLength": 0
              }
            },
            "kubeconfig_path": {
              "description": "Path to the kubernetes kubeconfig to use",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "Mode": {
          "description": "The mode gives an additional layer of permissions allowing to configure a Scout instance, giving read-only, write-only, or read and write permissions to that source. Default is read-only.",
          "enum": [
            "read",
            "write",
            "read/write"
          ]
        },
        "RuleElement": {
          "type": "string",
          "minLength": 0
        },
        "SecretsManagerConfig": {
          "type": "object",
          "required": [
            "fetch_all_versions"
          ],
          "minProperties": 1,
          "properties": {
            "env": {
              "anyOf": [
                {
                  "$ref": "#/definitions/inventory-config.schema.json/$defs/Env"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            },
            "exclude": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "fetch_all_versions": {
              "title": "Whether or not to collect all secret versions",
              "enum": [
                false,
                true
              ]
            },
            "include": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/inventory-config.schema.json/$defs/FilteringRule"
              }
            },
            "mode": {
              "default": "read",
              "$ref": "#/definitions/inventory-config.schema.json/$defs/Mode"
            },
            "profile_name": {
              "type": [
                "string",
                "null"
              ]
            },
            "regions": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string",
                "minLength": 0
              }
            }
          }
        }
      }
    },
    "inventory-log-level.schema.json": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "LogLevel",
      "enum": [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ]
    },
    "jobs.schema.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "minProperties": 0,
      "properties": {
        "fetch": {
          "description": "Job that fetches data from defined sources. If send is set to `true`, send collected data to the configured GitGuardian instance.",
          "type": "object",
          "minProperties": 0,
          "properties": {
            "enabled": {
              "default": true,
              "enum": [
                false,
                true
              ]
            },
            "schedule": {
              "default": "*/15 * * * *",
              "type": "string",
              "minLength": 0
            },
            "send": {
              "default": true,
              "enum": [
                false,
                true
              ]
            }
          }
        },
        "ping": {
          "type": "object",
          "minProperties": 0,
          "properties": {
            "schedule": {
              "default": "* * * * *",
              "type": "string",
              "minLength": 0
            }
          }
        },
        "sync": {
          "type": "object",
          "minProperties": 0,
          "properties": {
            "enabled": {
              "default": false,
              "enum": [
                false,
                true
              ]
            },
            "schedule": {
              "default": "* * * * *",
              "type": "string",
              "minLength": 0
            }
          }
        }
      }
    }
  }
}
