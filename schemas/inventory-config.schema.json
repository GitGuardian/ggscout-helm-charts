{
  "$defs": {
    "Accessibility": {
      "enum": [
        "regular",
        "personal"
      ],
      "type": "string"
    },
    "AkeylessAPIKeyAuth": {
      "properties": {
        "access_id": {
          "description": "Akeyless Access ID",
          "type": "string"
        },
        "access_key": {
          "description": "Akeyless Access Key",
          "type": "string"
        },
        "auth_mode": {
          "type": "string"
        }
      },
      "required": [
        "auth_mode",
        "access_id",
        "access_key"
      ],
      "type": "object"
    },
    "AkeylessConfig": {
      "properties": {
        "accessibility": {
          "$ref": "#/$defs/Accessibility",
          "default": "regular"
        },
        "api_url": {
          "default": "https://api.akeyless.io/",
          "description": "Akeyless API v2 URL. Default to https://api.akeyless.io/.\nIf you use an Akeyless Gateway, you must use the complete URL. Example: https://my-akeyless-gw.com/api/v2/",
          "format": "uri",
          "type": "string"
        },
        "auth": {
          "$ref": "#/$defs/AuthMode4",
          "description": "Auth mode: using one of Akeyless Authentication Method. Only APIKey for the moment"
        },
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        }
      },
      "required": [
        "auth",
        "fetch_all_versions"
      ],
      "type": "object"
    },
    "AuthMode": {
      "oneOf": [
        {
          "description": "Pass a token string to authenticate",
          "properties": {
            "auth_mode": {
              "const": "token",
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          },
          "required": [
            "auth_mode",
            "token"
          ],
          "title": "Token",
          "type": "object"
        },
        {
          "description": "Pass a file containing a token string to authenticate",
          "properties": {
            "auth_mode": {
              "const": "token_file",
              "type": "string"
            },
            "token_file": {
              "type": "string"
            }
          },
          "required": [
            "auth_mode",
            "token_file"
          ],
          "title": "Token file path",
          "type": "object"
        },
        {
          "description": "Use k8s authentication.\nIf ggscout is running outside a K8s cluster, it uses the kubeconfig file,\notherwise it uses an in-cluster K8s client",
          "properties": {
            "auth_mode": {
              "const": "k8s",
              "type": "string"
            },
            "mount": {
              "default": "kubernetes",
              "description": "HashiCorp login mount point. By default, \"kubernetes\"",
              "type": "string"
            },
            "namespace": {
              "description": "Kubernetes namespace where service account is defined",
              "type": [
                "string",
                "null"
              ]
            },
            "role": {
              "description": "HashiCorp Role to be used for authentication",
              "type": "string"
            },
            "service_account": {
              "description": "Kubernetes service account used for authentication",
              "type": [
                "string",
                "null"
              ]
            },
            "token_expiration_seconds": {
              "default": 1800,
              "description": "Token expiration time in second. Default to 30 minutes",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "auth_mode",
            "role"
          ],
          "title": "Kubernetes authentication",
          "type": "object"
        }
      ]
    },
    "AuthMode2": {
      "oneOf": [
        {
          "description": "Use a service account key file for authentication",
          "properties": {
            "auth_mode": {
              "const": "service_account_key_file",
              "type": "string"
            },
            "key_file": {
              "type": "string"
            }
          },
          "required": [
            "auth_mode",
            "key_file"
          ],
          "title": "Service Account Key File",
          "type": "object"
        },
        {
          "description": "Use Kubernetes API to get service account tokens and authenticate via WIF.\nThis is the most secure and cloud-native authentication method.",
          "properties": {
            "audience": {
              "description": "Custom audience for the WIF provider. If not specified, defaults to the standard\nWIF provider URL format: //iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/providers/{provider_id}",
              "type": [
                "string",
                "null"
              ]
            },
            "auth_mode": {
              "const": "k8s",
              "type": "string"
            },
            "gcp_service_account_name": {
              "description": "Google Service Account name (without @project.iam.gserviceaccount.com)",
              "type": "string"
            },
            "kubernetes_namespace": {
              "description": "Kubernetes namespace where the service account is located",
              "type": [
                "string",
                "null"
              ]
            },
            "kubernetes_service_account": {
              "description": "Kubernetes service account name to use for authentication",
              "type": [
                "string",
                "null"
              ]
            },
            "pool_id": {
              "description": "Workload Identity Pool ID",
              "type": "string"
            },
            "project_id": {
              "description": "GCP Project ID where the service account is located",
              "type": "string"
            },
            "project_number": {
              "description": "GCP Project Number",
              "type": "string"
            },
            "provider_id": {
              "description": "Workload Identity Provider ID",
              "type": "string"
            },
            "token_expiration_seconds": {
              "default": 1800,
              "description": "Token expiration time in seconds. Default to 30 minutes",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "auth_mode",
            "project_id",
            "project_number",
            "pool_id",
            "provider_id",
            "gcp_service_account_name"
          ],
          "title": "Kubernetes Workload Identity Federation",
          "type": "object"
        }
      ]
    },
    "AuthMode3": {
      "oneOf": [
        {
          "$ref": "#/$defs/CyberArkAuth",
          "properties": {
            "auth_mode": {
              "const": "cyber_ark",
              "type": "string"
            }
          },
          "required": [
            "auth_mode"
          ],
          "title": "CyberArk authentication",
          "type": "object"
        },
        {
          "$ref": "#/$defs/ConjurWorkloadAuth",
          "properties": {
            "auth_mode": {
              "const": "workload",
              "type": "string"
            }
          },
          "required": [
            "auth_mode"
          ],
          "title": "Workload authentication",
          "type": "object"
        },
        {
          "properties": {
            "auth_mode": {
              "const": "k8s",
              "type": "string"
            },
            "host_id": {
              "description": "Optional Host ID for the K8s authenticator",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "Kubernetes namespace where service account is defined",
              "type": [
                "string",
                "null"
              ]
            },
            "service_account": {
              "description": "Kubernetes service account used for authentication",
              "type": [
                "string",
                "null"
              ]
            },
            "service_id": {
              "default": "kubernetes",
              "description": "Service ID for the K8s authenticator",
              "type": "string"
            },
            "token_expiration_seconds": {
              "default": 1800,
              "description": "Token expiration time in seconds. Default to 30 minutes",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "auth_mode"
          ],
          "title": "Kubernetes authentication",
          "type": "object"
        }
      ]
    },
    "AuthMode4": {
      "anyOf": [
        {
          "$ref": "#/$defs/AkeylessAPIKeyAuth"
        }
      ]
    },
    "AzureKeyVaultConfig": {
      "properties": {
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "subscription_id": {
          "type": "string"
        }
      },
      "required": [
        "subscription_id",
        "fetch_all_versions"
      ],
      "type": "object"
    },
    "ConjurCloudConfig": {
      "properties": {
        "auth": {
          "$ref": "#/$defs/AuthMode3"
        },
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "subdomain": {
          "title": "The Conjur Cloud subdomain",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "subdomain",
        "fetch_all_versions"
      ],
      "type": "object"
    },
    "ConjurWorkloadAuth": {
      "properties": {
        "api_key": {
          "description": "Workload API key for authenticating",
          "type": "string"
        },
        "login": {
          "description": "Workload login (ID) for authenticating",
          "type": "string"
        }
      },
      "required": [
        "login",
        "api_key"
      ],
      "type": "object"
    },
    "CyberArkAuth": {
      "properties": {
        "client_id": {
          "description": "CyberArk client ID or Conjur workload Client ID",
          "type": "string"
        },
        "client_secret": {
          "description": "Secret for authenticating",
          "type": "string"
        },
        "tenant_id": {
          "description": "Cyberark Cloud tenant ID",
          "type": "string"
        }
      },
      "required": [
        "tenant_id",
        "client_id",
        "client_secret"
      ],
      "type": "object"
    },
    "DelineaSecretServerConfig": {
      "oneOf": [
        {
          "$ref": "#/$defs/DelineaSecretServerOAuth",
          "properties": {
            "auth_mode": {
              "const": "oauth",
              "type": "string"
            }
          },
          "required": [
            "auth_mode"
          ],
          "type": "object"
        }
      ],
      "properties": {
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "tenant": {
          "description": "Delinea tenant",
          "type": "string"
        },
        "tld": {
          "default": "com",
          "description": "Top-level domain\nThis can be found by clicking on \"Token API documentation\" in the Settings > REST API section of the Secret Server UI",
          "type": "string"
        }
      },
      "required": [
        "tenant"
      ],
      "type": "object"
    },
    "DelineaSecretServerOAuth": {
      "properties": {
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        }
      },
      "required": [
        "client_id",
        "client_secret"
      ],
      "type": "object"
    },
    "Env": {
      "description": "Declare an environment",
      "oneOf": [
        {
          "const": "production",
          "description": "aliases accepted: `prod` and `prd`",
          "title": "production",
          "type": "string"
        },
        {
          "const": "pre-production",
          "description": "aliases accepted: `pre-prod`, `preprod` and `preproduction`",
          "title": "pre-production",
          "type": "string"
        },
        {
          "const": "staging",
          "title": "staging",
          "type": "string"
        },
        {
          "const": "testing",
          "title": "testing",
          "type": "string"
        },
        {
          "const": "development",
          "description": "aliases accepted: `dev` and `local`",
          "title": "development",
          "type": "string"
        }
      ]
    },
    "FetcherConfig": {
      "oneOf": [
        {
          "$ref": "#/$defs/HashiCorpVaultConfig",
          "description": "This fetcher fetches secrets from [HashiCorp Vault](https://www.hashicorp.com/products/vault)",
          "properties": {
            "type": {
              "const": "hashicorpvault",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "HashiCorp Vault",
          "type": "object"
        },
        {
          "$ref": "#/$defs/K8sConfig",
          "description": "Kubernetes fetcher",
          "properties": {
            "type": {
              "const": "k8s",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "Kubernetes",
          "type": "object"
        },
        {
          "$ref": "#/$defs/SecretsManagerConfig",
          "description": "AWS Secrets Manager fetcher",
          "properties": {
            "type": {
              "const": "awssecretsmanager",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "AWS Secrets Manager",
          "type": "object"
        },
        {
          "$ref": "#/$defs/GCPSecretManagerConfig",
          "description": "GCP Secret Manager fetcher",
          "properties": {
            "type": {
              "const": "gcpsecretmanager",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "GCP Secret Manager",
          "type": "object"
        },
        {
          "$ref": "#/$defs/AzureKeyVaultConfig",
          "description": "Azure Key Vault fetcher",
          "properties": {
            "type": {
              "const": "azurekeyvault",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "Azure Key Vault",
          "type": "object"
        },
        {
          "$ref": "#/$defs/GitLabCIConfig",
          "description": "GitLab CI fetcher",
          "properties": {
            "type": {
              "const": "gitlabci",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "GitLab CI",
          "type": "object"
        },
        {
          "$ref": "#/$defs/ConjurCloudConfig",
          "description": "Conjur Cloud fetcher",
          "properties": {
            "type": {
              "const": "conjurcloud",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "Conjur Cloud",
          "type": "object"
        },
        {
          "$ref": "#/$defs/AkeylessConfig",
          "description": "Akeyless fetcher",
          "properties": {
            "type": {
              "const": "akeyless",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "Akeyless",
          "type": "object"
        },
        {
          "$ref": "#/$defs/DelineaSecretServerConfig",
          "description": "Delinea SecretServer fetcher",
          "properties": {
            "type": {
              "const": "delineasecretserver",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "title": "Delinea Secret Server",
          "type": "object"
        }
      ]
    },
    "FilteringRule": {
      "properties": {
        "resource_ids": {
          "items": {
            "$ref": "#/$defs/RuleElement"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "source_ids": {
          "items": {
            "$ref": "#/$defs/RuleElement"
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "GCPSecretManagerConfig": {
      "properties": {
        "auth": {
          "$ref": "#/$defs/AuthMode2",
          "default": {
            "auth_mode": "application_default"
          },
          "description": "Authentication method for GCP\nIf not specified, defaults to Application Default Credentials"
        },
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "required": [
        "fetch_all_versions"
      ],
      "type": "object"
    },
    "GitGuardianConfig": {
      "properties": {
        "api_token": {
          "title": "API Token to authenticate with",
          "type": "string"
        },
        "endpoint": {
          "description": "Example: https://gitguardian.internal/",
          "format": "uri",
          "title": "Hostname or endpoint",
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "api_token"
      ],
      "title": "GitGuardian configuration",
      "type": "object"
    },
    "GitLabCIConfig": {
      "properties": {
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "token": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "token"
      ],
      "type": "object"
    },
    "HashiCorpVaultConfig": {
      "properties": {
        "auth": {
          "$ref": "#/$defs/AuthMode",
          "default": {
            "auth_mode": "token",
            "token": "token from VAULT_TOKEN env"
          },
          "description": "Authentication method.\nIf no authentication method is provided `VAULT_TOKEN` env variable is used as a default token"
        },
        "auth_token": {
          "deprecated": true,
          "description": "[Deprecated - Use `auth.auth_method = \"token\"` and `auth.token = \"my_token\"` instead]",
          "type": [
            "string",
            "null"
          ]
        },
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "path": {
          "type": [
            "string",
            "null"
          ]
        },
        "vault_address": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "vault_address",
        "fetch_all_versions"
      ],
      "type": "object"
    },
    "InCluster": {
      "properties": {
        "name": {
          "description": "Kubernetes cluster name is mandatory because it cannot be retrieved with the Kubernetes API",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "K8sConfig": {
      "oneOf": [
        {
          "$ref": "#/$defs/KubeConfigFile",
          "properties": {
            "config_source": {
              "const": "kubeconfigfile",
              "type": "string"
            }
          },
          "required": [
            "config_source"
          ],
          "title": "KubeConfig File",
          "type": "object"
        },
        {
          "$ref": "#/$defs/InCluster",
          "properties": {
            "config_source": {
              "const": "incluster",
              "type": "string"
            }
          },
          "required": [
            "config_source"
          ],
          "title": "InCluster",
          "type": "object"
        }
      ],
      "properties": {
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "namespaces": {
          "description": "Namespaces to read from. Can be a literal string or a glob expression to match\nmultiple namespaces.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "KubeConfigFile": {
      "properties": {
        "contexts": {
          "description": "Kubernetes contexts to filter on.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "kubeconfig_path": {
          "description": "Path to the kubernetes kubeconfig to use",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "Mode": {
      "description": "The mode gives an additional layer of permissions allowing to configure a Scout instance, giving read-only, write-only, or read and write permissions to that source. Default is read-only.",
      "enum": [
        "read",
        "write",
        "read/write"
      ],
      "type": "string"
    },
    "RuleElement": {
      "type": "string"
    },
    "SecretsManagerConfig": {
      "properties": {
        "env": {
          "anyOf": [
            {
              "$ref": "#/$defs/Env"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "fetch_all_versions": {
          "title": "Whether or not to collect all secret versions",
          "type": "boolean"
        },
        "include": {
          "items": {
            "$ref": "#/$defs/FilteringRule"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "mode": {
          "$ref": "#/$defs/Mode",
          "default": "read"
        },
        "profile_name": {
          "type": [
            "string",
            "null"
          ]
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "required": [
        "fetch_all_versions"
      ],
      "type": "object"
    }
  },
  "$id": "inventory-config.schema.json",
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "properties": {
    "gitguardian": {
      "anyOf": [
        {
          "$ref": "#/$defs/GitGuardianConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "sources": {
      "additionalProperties": {
        "$ref": "#/$defs/FetcherConfig"
      },
      "type": [
        "object",
        "null"
      ]
    }
  },
  "title": "Config",
  "type": "object"
}